version: '3'
services:
  rabbitmq:
    container_name: rabbitmq
    image: 'rabbitmq:management'
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - taxi-provider-network

  discovery-server:
    container_name: discovery-server
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      args:
        SERVICE_NAME: discovery-server
        FILE_PATH: discoveryServer
    environment:
      EUREKA_HOSTNAME: discovery-server
    ports:
      - "8761:8761"
    networks:
      - taxi-provider-network
    healthcheck:
      test: [ "CMD", "curl", "--fail", "--location", "http://discovery-server:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  config-server:
    container_name: config-server
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      args:
        SERVICE_NAME: config-server
        FILE_PATH: configServer
    environment:
      EUREKA_URL: http://discovery-server:8761/eureka/
    ports:
      - "8084:8084"
    networks:
      - taxi-provider-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://config-server:8084/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      discovery-server:
        condition: service_healthy

  gateway-service:
    container_name: gateway-service
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      args:
        SERVICE_NAME: gateway-service
        FILE_PATH: gatewayService
    environment:
      EUREKA_URL: http://discovery-server:8761/eureka/
    ports:
      - "8079:8079"
    networks:
      - taxi-provider-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://gateway-service:8079/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy

  driver-service-db:
    image: postgres:13.3
    container_name: driver-service-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: driver_service_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5442:5432"
    networks:
      - taxi-provider-network

  driver-service:
    container_name: driver-service
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      args:
        SERVICE_NAME: driver-service
        FILE_PATH: driverService
    environment:
      RABBITMQ_HOSTNAME: rabbitmq
      ZIPKIN_HOSTNAME: zipkin
      KEYCLOAK_HOSTNAME: keycloak
      MINIO_HOSTNAME: minio
      EUREKA_URL: http://discovery-server:8761/eureka/
      JDBC_DATABASE_URL: jdbc:postgresql://driver-service-db:5432/driver_service_db
      LOKI_URL: http://loki:3100/loki/api/v1/push
      REDIS_HOSTNAME: redis
    ports:
      - "8083:8083"
    networks:
      - taxi-provider-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://driver-service:8083/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      rabbitmq:
        condition: service_started
      keycloak:
        condition: service_started
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      driver-service-db:
        condition: service_started

  passenger-service-db:
    image: postgres:13.3
    container_name: passenger-service-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: passenger_service_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5443:5432"
    networks:
      - taxi-provider-network

  passenger-service:
    container_name: passenger-service
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      args:
        SERVICE_NAME: passenger-service
        FILE_PATH: passengerService
    environment:
      RABBITMQ_HOSTNAME: rabbitmq
      ZIPKIN_HOSTNAME: zipkin
      KEYCLOAK_HOSTNAME: keycloak
      MINIO_HOSTNAME: minio
      EUREKA_URL: http://discovery-server:8761/eureka/
      JDBC_DATABASE_URL: jdbc:postgresql://passenger-service-db:5432/passenger_service_db
      LOKI_URL: http://loki:3100/loki/api/v1/push
      REDIS_HOSTNAME: redis
    ports:
      - "8082:8082"
    networks:
      - taxi-provider-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://passenger-service:8082/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      rabbitmq:
        condition: service_started
      keycloak:
        condition: service_started
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      passenger-service-db:
        condition: service_started

  ride-service-db:
    image: postgres:13.3
    container_name: ride-service-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: ride_service_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5444:5432"
    networks:
      - taxi-provider-network

  ride-service:
    container_name: ride-service
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      args:
        SERVICE_NAME: ride-service
        FILE_PATH: rideService
    environment:
      RABBITMQ_HOSTNAME: rabbitmq
      ZIPKIN_HOSTNAME: zipkin
      KEYCLOAK_HOSTNAME: keycloak
      EUREKA_URL: http://discovery-server:8761/eureka/
      JDBC_DATABASE_URL: jdbc:postgresql://ride-service-db:5432/ride_service_db
      LOKI_URL: http://loki:3100/loki/api/v1/push
      REDIS_HOSTNAME: redis
    ports:
      - "8081:8081"
    networks:
      - taxi-provider-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://ride-service:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      rabbitmq:
        condition: service_started
      keycloak:
        condition: service_started
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      ride-service-db:
        condition: service_started

  rating-service-db:
    image: mongodb/mongodb-community-server:latest
    container_name: rating-service-db
    ports:
      - "27017:27017"
    networks:
      - taxi-provider-network

  rating-service:
    container_name: rating-service
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      args:
        SERVICE_NAME: rating-service
        FILE_PATH: ratingService
    environment:
      RABBITMQ_HOSTNAME: rabbitmq
      ZIPKIN_HOSTNAME: zipkin
      KEYCLOAK_HOSTNAME: keycloak
      EUREKA_URL: http://discovery-server:8761/eureka/
      MONGODB_URL: mongodb://rating-service-db:27017/rating_service_db
      LOKI_URL: http://loki:3100/loki/api/v1/push
      REDIS_HOSTNAME: redis
    ports:
      - "8080:8080"
    networks:
      - taxi-provider-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://rating-service:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      rabbitmq:
        condition: service_started
      keycloak:
        condition: service_started
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      rating-service-db:
        condition: service_started

  auth-service-db:
    image: postgres:13.3
    container_name: auth-service-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: auth_service_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "5445:5432"
    networks:
      - taxi-provider-network

  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: keycloak
    environment:
      KC_HOSTNAME_PORT: 8484
      KC_HOSTNAME_STRICT_BACKCHANNEL: true
      KC_HTTP_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
      KC_LOG_LEVEL: info
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://auth-service-db:5432/auth_service_db
      KC_DB_USERNAME: user
      KC_DB_PASSWORD: pass
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
    depends_on:
      - auth-service-db
    ports:
      - "8484:8484"
    networks:
      - taxi-provider-network
    command: start-dev --http-port 8484 --import-realm

  auth-service:
    container_name: auth-service
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      args:
        SERVICE_NAME: auth-service
        FILE_PATH: authService
    environment:
      RABBITMQ_HOSTNAME: rabbitmq
      ZIPKIN_HOSTNAME: zipkin
      KEYCLOAK_HOSTNAME: keycloak
      EUREKA_URL: http://discovery-server:8761/eureka/
      LOKI_URL: http://loki:3100/loki/api/v1/push
    ports:
      - "8085:8085"
    networks:
      - taxi-provider-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://auth-service:8085/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
        discovery-server:
          condition: service_healthy
        config-server:
          condition: service_healthy
        gateway-service:
          condition: service_healthy
        driver-service:
          condition: service_healthy
        passenger-service:
          condition: service_healthy
        keycloak:
          condition: service_started

  report-service:
    container_name: report-service
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      args:
        SERVICE_NAME: report-service
        FILE_PATH: reportService
    environment:
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      ZIPKIN_HOSTNAME: zipkin
      KEYCLOAK_HOSTNAME: keycloak
      EUREKA_URL: http://discovery-server:8761/eureka/
      LOKI_URL: http://loki:3100/loki/api/v1/push
    ports:
      - "8086:8086"
    networks:
      - taxi-provider-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://report-service:8086/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      keycloak:
        condition: service_started
      discovery-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
      driver-service:
        condition: service_healthy
      ride-service:
        condition: service_healthy
      rating-service:
        condition: service_healthy


  grafana:
    container_name: grafana
    image: grafana/grafana:9.5.2
    ports:
      - "3000:3000"
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      taxi-provider-network:
        aliases:
          - grafana

  prometheus:
      container_name: prometheus
      image: prom/prometheus
      ports:
        - "9090:9090"
      volumes:
        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
        - ./prometheus:/prometheus
      networks:
        taxi-provider-network:
          aliases:
            - prometheus
  loki:
    container_name: loki
    image: grafana/loki:2.9.0
    ports:
        - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
        - ./loki/config:/etc/loki
    networks:
      taxi-provider-network:
        aliases:
          - loki

  zipkin:
    container_name: zipkin-service
    image: openzipkin/zipkin:latest
    restart: always
    ports:
      - "9411:9411"
    networks:
      taxi-provider-network:
        aliases:
          - zipkin

  minio:
    image: docker.io/bitnami/minio:2022
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - taxi-provider-network
    volumes:
      - 'minio_data:/data'
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin123

  redis:
    image: redis:7.4.0
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    networks:
      - taxi-provider-network

networks:
  taxi-provider-network:
    driver: bridge

volumes:
  minio_data:
    driver: local